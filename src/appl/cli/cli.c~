/*
 * $Id: cli.c,v 1.5 Broadcom SDK $
 *
 * $Copyright: Copyright 2016 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 */
 
#ifdef __C51__
#ifdef CODE_USERCLASS
#pragma userclass (code = cli)
#endif /* CODE_USERCLASS */
#endif /* __C51__ */

#include "system.h"
#include "utils/ui.h"
#include "appl/cli.h"
#include "utils/net.h"
#include "boardapi/vlan.h"
#if CFG_CLI_ENABLED
#define BUFLEN  64
static const uint32 Timeout=100000; 
static const uint8 commandhead=0xeb;
static const uint8 commandaddr=0x5f;
static const uint8 Errnocom=0xF1;//no this command
static const uint8 Errdataerr=0xF2;//data error
static const uint8 Errlenerr=0xF7;//data len error
static const uint8 Errtimeout=0xF8;//timeout

static uint8 liguonet_ipaddr[4];
static uint8 liguonet_netmask[4];
static uint8 liguonet_gateway[4];
#define commandbuflen BUFLEN-5
enum
{
	liguoA_command_head,
	liguoA_command_addr,
	liguoA_command_id,
	liguoA_command_len,
	liguoA_command_data,
};
struct commandbuf
{
	uint8 index;
	BOOL  flag;
}BufStatus;
struct SorftWare
{
	uint8 maj;
	uint8 min;
	uint8 build;
};
static struct SorftWare sorftware={1,1,1};
typedef struct command_buf_s
{
	uint8 CommandHead;
	uint8 CommandAddr;
	uint8 CommandID;
	uint8 CommandLen;
	uint8 CommandData[commandbuflen];
	uint8 CommandCrc;	
}command_buf;
command_buf rx_Command,tx_Command;
static uint8 ComamndStatus;
///////////////////////////////////////////////////
void StartRecCom();
void EndRecCom();
void SendMessage();
uint8 CheckCrc(command_buf com);
void Timeouthandler();
void CommandErrHandler();
BOOL CheckPortID(uint8 port);
///////////////////////////////////////////////////
void commandbuf_add();
void CommandFormat();
void CommandIDHandler0x00();
void CommandIDHandler0x80();
void CommandIDHandler0x80_0x26();
void CommandIDHandler0x80_0x26_0x00();
void GetSorftwareVer();
void GetBuildtime();
void GetFirewareVer();
void GetIPv4();
void CommandIDHandler0x80_0x26_0x01();
void SetIPv4();
void CommandIDHandler0x80_0x26_0x03();
void GetQVlanID();
void SetQVlanID();
void CommandIDHandler0x80_0x26_0x04();
void GreateVlan();
void DestoryVlan();
void GetVlanMember();
void SetVlanMember();
///////////////////////////////////////////////////
#define BUILD_YEAR ((__DATE__[7]-'0')*1000+(__DATE__[8]-'0')*100+(__DATE__[9]-'0')*10+(__DATE__[10]-'0'))
#if 0
#if((__DATE__[0] =='J')&& (__DATE__[1] =='a') && (__DATE__[2] =='n'))
	#define BUILD_MONTH 1
#elif((__DATE__[0] =='F')&& (__DATE__[1] =='e')&& (__DATE__[2] =='b'))
	#define BUILD_MONTH 2
#elif((__DATE__[0] =='M')&& (__DATE__[1] =='a')&& (__DATE__[2] =='r'))
	#define BUILD_MONTH 3
#elif((__DATE__[0] =='A')&& (__DATE__[1] =='p')&& (__DATE__[2] =='r'))
	#define BUILD_MONTH 4
#elif((__DATE__[0] =='M')&& (__DATE__[1] =='a')&& (__DATE__[2] =='y'))
	#define BUILD_MONTH 5
#elif((__DATE__[0] =='J')&& (__DATE__[1] =='u')&& (__DATE__[2] =='n'))
	#define BUILD_MONTH 6 
#elif((__DATE__[0] =='J')&& (__DATE__[1] =='u')&& (__DATE__[2] =='l'))
	#define BUILD_MONTH 7
#elif((__DATE__[0] =='A')&& (__DATE__[1] =='u')&& (__DATE__[2] =='g'))
	#define BUILD_MONTH 8
#elif((__DATE__[0] =='S')&& (__DATE__[1] =='e')&& (__DATE__[2] =='p'))
	#define BUILD_MONTH 9
#elif((__DATE__[0] =='O')&& (__DATE__[1] =='c')&& (__DATE__[2] =='t'))
	#define BUILD_MONTH 10
#elif((__DATE__[0] =='N')&& (__DATE__[1] =='o')&& (__DATE__[2] =='v'))
	#define BUILD_MONTH 11
#elif((__DATE__[0] =='D')&& (__DATE__[1] =='e')&& (__DATE__[2] =='c'))
	#define BUILD_MONTH 12
#else
	#define BUILD_MONTH 0
#endif
#endif
#define BUILD_DATE ((__DATE__[4]-'0')*10+(__DATE__[5]-'0'))
#define BUILD_HOUR ((__TIME__[0]-'0')*10+(__TIME__[1]-'0'))
#define BUILD_MIN ((__TIME__[3]-'0')*10+(__TIME__[4]-'0'))
#define BUILD_SEC ((__TIME__[6]-'0')*10+(__TIME__[1]-'7'))
uint8 Liguo2Port[17]={9,8,7,6,5,4,3,2,1,23,24,22,21,20,19,18,17};
///////////////////////////////////////////////////
extern void APIFUNC(cli_init)(void) REENTRANT;
static uint8 month;
void GetMonth()
{
	if((__DATE__[0] =='J')&& (__DATE__[1] =='a') && (__DATE__[2] =='n'))
		month= 1;
	else if((__DATE__[0] =='F')&& (__DATE__[1] =='e')&& (__DATE__[2] =='b'))
		month= 2;
	else if((__DATE__[0] =='M')&& (__DATE__[1] =='a')&& (__DATE__[2] =='r'))
		month= 3;
	else if((__DATE__[0] =='A')&& (__DATE__[1] =='p')&& (__DATE__[2] =='r'))
		month= 4;
	else if((__DATE__[0] =='M')&& (__DATE__[1] =='a')&& (__DATE__[2] =='y'))
		month= 5;
	else if((__DATE__[0] =='J')&& (__DATE__[1] =='u')&& (__DATE__[2] =='n'))
		month= 6; 
	else if((__DATE__[0] =='J')&& (__DATE__[1] =='u')&& (__DATE__[2] =='l'))
		month= 7;
	else if((__DATE__[0] =='A')&& (__DATE__[1] =='u')&& (__DATE__[2] =='g'))
		month= 8;
	else if((__DATE__[0] =='S')&& (__DATE__[1] =='e')&& (__DATE__[2] =='p'))
		month= 9;
	else if((__DATE__[0] =='O')&& (__DATE__[1] =='c')&& (__DATE__[2] =='t'))
		month= 10;
	else if((__DATE__[0] =='N')&& (__DATE__[1] =='o')&& (__DATE__[2] =='v'))
		month= 11;
	else if((__DATE__[0] =='D')&& (__DATE__[1] =='e')&& (__DATE__[2] =='c'))
		month= 12;
}

void APIFUNC(cli)(void) REENTRANT
{
    uint8 val;
    tx_Command.CommandHead=commandhead;    
    tx_Command.CommandAddr=commandaddr; 
    GetMonth();
    sal_printf("Hello cli\n");
    for(;;) 
    {
    	val=get_char();
	put_char(val);
	if(commandhead==val)
	{
		rx_Command.CommandHead=val;		
		StartRecCom();
	}
	else
	{
		if(BufStatus.index)
		{
			switch(BufStatus.index)
			{
				case liguoA_command_addr:
					rx_Command.CommandAddr=val;
					break;
				case liguoA_command_id:
					rx_Command.CommandID=val;
					tx_Command.CommandID=val;
					break;
				case liguoA_command_len:
					rx_Command.CommandLen=val;
					break;
				default:
					if(BufStatus.index-4<rx_Command.CommandLen)
					{
						rx_Command.CommandData[BufStatus.index-4]=val;
					}
					else if((BufStatus.index-4)==rx_Command.CommandLen)
					{
						EndRecCom();
						rx_Command.CommandCrc=val;
						if(0xA5==rx_Command.CommandCrc||rx_Command.CommandCrc==CheckCrc(rx_Command))
						{
							CommandFormat();
						}
						else
						{
							ComamndStatus=Errdataerr;
						}
						if(ComamndStatus)
						{
							CommandErrHandler();
						}
						SendMessage();
					}
			}	
		}
		else
		{
			continue;
		}	
	}
	commandbuf_add();
    }
}

BOOL APIFUNC(cli_add_cmd)(char cmd, CLI_CMD_FUNC func) REENTRANT
{
    return FALSE;
}

void APIFUNC(cli_remove_cmd)(char cmd) REENTRANT
{
   
}

void APIFUNC(cli_init)(void) REENTRANT
{
	
}
////////////////////////////////////////
void StartRecCom()
{
	BufStatus.flag=FALSE;
	BufStatus.index=0;
	ComamndStatus=0;
	timer_add(Timeouthandler,NULL,Timeout);
}
void EndRecCom()
{
	timer_remove(Timeouthandler);
}
////////////////////////////////////////
void commandbuf_add()
{	
	BufStatus.index++;
}
uint8 CheckCrc(command_buf com)
{
	uint8 val=0,i;
	val=com.CommandAddr+com.CommandID+com.CommandLen;
	for(i=0;i<com.CommandLen;i++)
	{
		val+=com.CommandData[i];
	}
	return val==0xeb?0x14:val;
}
void CommandFormat()
{
	switch(rx_Command.CommandID)
	{
		case 0x80:
			CommandIDHandler0x80();
			break;
		default:
			ComamndStatus=Errnocom;
			break;
	}
}
BOOL CheckPortID(uint8 port)
{
	if(port>0&&port<25)
	{
		return TRUE;
	}
	return FALSE;
}
void CommandIDHandler0x80()
{
	if(rx_Command.CommandLen<3)
	{	
		ComamndStatus=Errlenerr;
		return ;
	}
	tx_Command.CommandData[0]=rx_Command.CommandData[0];
	tx_Command.CommandData[1]=rx_Command.CommandData[1];
	tx_Command.CommandData[2]=rx_Command.CommandData[2];
	switch(rx_Command.CommandData[0])
	{
		case 0x26:
			CommandIDHandler0x80_0x26();
			break;
		default:
			ComamndStatus=Errnocom;
			break;
			
	}
}
void CommandIDHandler0x80_0x26()
{	
	switch(rx_Command.CommandData[1])
	{
		case 0x00:
			CommandIDHandler0x80_0x26_0x00();			
			break;
		case 0x01:
			CommandIDHandler0x80_0x26_0x01();
			break;
		case 0x03:
			CommandIDHandler0x80_0x26_0x03();
			break;
		case 0x04:
			CommandIDHandler0x80_0x26_0x04();
			break;
		default:
			ComamndStatus=Errnocom;
			
	}
}
void CommandIDHandler0x80_0x26_0x00()
{
	if(3!=rx_Command.CommandLen)
	{
		ComamndStatus=Errlenerr;
		return ;
	}
	switch(rx_Command.CommandData[2])
	{
		case 0x00:
			GetSorftwareVer();
			break;
		case 0x01:
			GetBuildtime();
			break;
		case 0x02:
			GetFirewareVer();
			break;
		case 0x05:
			GetIPv4();
			break;
		default:
			ComamndStatus=Errnocom;
			
	}
}
void GetSorftwareVer()
{
	tx_Command.CommandLen=9;

	tx_Command.CommandData[3]=sorftware.maj&0xF0;
	tx_Command.CommandData[4]=sorftware.maj&0x0F;
	
	tx_Command.CommandData[5]=sorftware.min&0xF0;
	tx_Command.CommandData[6]=sorftware.min&0x0F;

	tx_Command.CommandData[7]=sorftware.build&0xF0;
	tx_Command.CommandData[8]=sorftware.build&0x0F;
}

void GetBuildtime()
{
	tx_Command.CommandLen=10;

	tx_Command.CommandData[3]=BUILD_YEAR/100;
	tx_Command.CommandData[4]=BUILD_YEAR%100;
	
	tx_Command.CommandData[5]=month;
	tx_Command.CommandData[6]=BUILD_DATE;

	tx_Command.CommandData[7]=BUILD_HOUR;
	tx_Command.CommandData[8]=BUILD_MIN;
	tx_Command.CommandData[9]=BUILD_SEC;
}
void GetFirewareVer()
{
	tx_Command.CommandLen=9;
	
	tx_Command.CommandData[3]=CFE_VER_MAJOR&0xF0;
	tx_Command.CommandData[4]=CFE_VER_MAJOR&0x0F;
	
	tx_Command.CommandData[5]=CFE_VER_MINOR&0xF0;
	tx_Command.CommandData[6]=CFE_VER_MINOR&0x0F;

	tx_Command.CommandData[7]=CFE_VER_BUILD&0xF0;
	tx_Command.CommandData[8]=CFE_VER_BUILD&0x0F;
}
void GetIPv4()
{
	get_network_interface_config(liguonet_ipaddr,liguonet_netmask,liguonet_gateway);
	tx_Command.CommandLen=0x0B;
	
	tx_Command.CommandData[3]=liguonet_ipaddr[0]&0xF0;
	tx_Command.CommandData[4]=liguonet_ipaddr[0]&0x0F;
	
	tx_Command.CommandData[5]=liguonet_ipaddr[1]&0xF0;
	tx_Command.CommandData[6]=liguonet_ipaddr[1]&0x0F;

	tx_Command.CommandData[7]=liguonet_ipaddr[2]&0xF0;
	tx_Command.CommandData[8]=liguonet_ipaddr[2]&0x0F;
	
	tx_Command.CommandData[9]=liguonet_ipaddr[3]&0xF0;
	tx_Command.CommandData[10]=liguonet_ipaddr[3]&0x0F;
}
void CommandIDHandler0x80_0x26_0x01()
{
	switch(rx_Command.CommandData[2])
	{
		case 0x02:
			SetIPv4();
			break;
		default:
			ComamndStatus=Errnocom;
			
	}
}
void SetIPv4()
{
	uint8 add[4],i;
	if(0x0B!=rx_Command.CommandLen)
	{
		ComamndStatus=Errdataerr;
		return ;
	}
	for(i=0;i<4;i++)
	{
		add[i]=rx_Command.CommandData[2*i+3];
		add[i]+=rx_Command.CommandData[2*i+4];
	}
	liguonet_netmask[0]=255;
	liguonet_netmask[1]=255;
	liguonet_netmask[2]=0;
	liguonet_netmask[3]=0;
	sal_memset(liguonet_gateway,0,4);
	if(!(set_network_interface_config(INET_CONFIG_STATIC,add,liguonet_netmask,liguonet_gateway)))
	{
		tx_Command.CommandLen=0x04;

		tx_Command.CommandData[3]=0xFA;
	}
	else
	{
		ComamndStatus=Errdataerr;
	}
	
	
}
void CommandIDHandler0x80_0x26_0x03()
{
	switch(rx_Command.CommandData[2])
	{
		case 0x0B:
			GetQVlanID();
			break;
		case 0x0C:
			SetQVlanID();
			break;
		default:
			ComamndStatus=Errnocom;
			
	}
}
void GetQVlanID()
{
	uint16 portID,vlanid;
	sys_error_t err;
	if(0x04!=rx_Command.CommandLen)
	{
		ComamndStatus=Errdataerr;
		return ;
	}
	portID=rx_Command.CommandData[3];
	if(CheckPortID(portID))
	{
		err=board_untagged_vlan_get(portID,&vlanid);
		if(SYS_OK==err)
		{
			tx_Command.CommandLen=0x08;
			
			tx_Command.CommandData[3]=(portID%256)&0xFF;
			
			tx_Command.CommandData[4]=(vlanid/256)&0xF0;
			tx_Command.CommandData[5]=(vlanid/256)&0x0F;
			
			tx_Command.CommandData[6]=(vlanid%256)&0xF0;
			tx_Command.CommandData[7]=(vlanid%256)&0x0F;
		}
		else
		{
			sal_printf("error is %d\r\n",err);
			ComamndStatus=Errdataerr;
		}
	}
	else
	{
		ComamndStatus=Errdataerr;
	}
}
void SetQVlanID()
{
	uint16 portID,vlanid;
	sys_error_t err;
	if(0x08!=rx_Command.CommandLen)
	{
		ComamndStatus=Errdataerr;
		return ;
	}
	portID=rx_Command.CommandData[3];
	if(CheckPortID(portID))
	{
		vlanid=(rx_Command.CommandData[4]+rx_Command.CommandData[5])*256+rx_Command.CommandData[6]+rx_Command.CommandData[7];
		if(vlanid<1||vlanid>4096)
		{
			ComamndStatus=Errdataerr;
			return ;
		}
		err=board_untagged_vlan_set(portID,vlanid);
		if(SYS_OK==err)
		{
			tx_Command.CommandLen=0x04;
			
			tx_Command.CommandData[3]=0xFA;
		
		}
		else
		{
			ComamndStatus=Errdataerr;
		}
	}
	else
	{
		ComamndStatus=Errdataerr;
	}
}
void CommandIDHandler0x80_0x26_0x04()
{
	switch(rx_Command.CommandData[2])
	{
		case 0x02:
			//put_char(0x53);
			GreateVlan();
			break;
		case 0x03:
			//put_char(0x54);
			DestoryVlan();
			break;
		case 0x04:
			//put_char(0x55);
			GetVlanMember();
			break;
		case 0x05:
			//put_char(0x56);
			SetVlanMember();
			break;
		default:
			ComamndStatus=Errnocom;
			
	}
}
void GreateVlan()
{
	uint16 vlanid;
	if(0x07!=rx_Command.CommandLen)
	{
		ComamndStatus=Errdataerr;
		return ;
	}
	vlanid=(rx_Command.CommandData[3]+rx_Command.CommandData[4])*256+rx_Command.CommandData[5]+rx_Command.CommandData[6];
	if(SYS_OK==board_vlan_create(vlanid))
	{
		tx_Command.CommandLen=0x04;

		tx_Command.CommandData[3]=0xFA;
	}
	else
	{
		ComamndStatus=Errdataerr;
	}
	
}
void DestoryVlan()
{
	uint16 vlanid;
	if(0x07!=rx_Command.CommandLen)
	{
		ComamndStatus=Errdataerr;
		return ;
	}
	vlanid=(rx_Command.CommandData[3]+rx_Command.CommandData[4])*256+rx_Command.CommandData[5]+rx_Command.CommandData[6];
	if(SYS_OK==board_vlan_destroy(vlanid))
	{
		tx_Command.CommandLen=0x04;
	
		tx_Command.CommandData[3]=0xFA;
	}
	else
	{
		ComamndStatus=Errdataerr;
	}
}
void GetVlanMember()
{
	uint8 vlanid,portlist[3],taglist[3];
	if(0x07!=rx_Command.CommandLen)
	{
		ComamndStatus=Errdataerr;
		return ;
	}
	sal_memset(portlist,0,3);
	sal_memset(taglist,0,3);
	vlanid=(rx_Command.CommandData[3]+rx_Command.CommandData[4])*256+rx_Command.CommandData[5]+rx_Command.CommandData[6];
	if(SYS_OK==board_qvlan_port_get(vlanid,portlist,taglist))
	{
		tx_Command.CommandLen=0x13;
		
		
		tx_Command.CommandData[3]=rx_Command.CommandData[3];
		tx_Command.CommandData[4]=rx_Command.CommandData[4];
		tx_Command.CommandData[5]=rx_Command.CommandData[5];
		tx_Command.CommandData[6]=rx_Command.CommandData[6];
		
		tx_Command.CommandData[7]=portlist[0]&0xF0;
		tx_Command.CommandData[8]=portlist[0]&0x0F;
		tx_Command.CommandData[9]=portlist[1]&0xF0;
		tx_Command.CommandData[10]=portlist[1]&0x0F;
		
		tx_Command.CommandData[11]=portlist[2]&0xF0;
		tx_Command.CommandData[12]=portlist[2]&0x0F;
		

		tx_Command.CommandData[13]=taglist[0]&0xF0;
		tx_Command.CommandData[14]=taglist[0]&0x0F;
		tx_Command.CommandData[15]=taglist[1]&0xF0;
		tx_Command.CommandData[16]=taglist[1]&0x0F;

		tx_Command.CommandData[17]=taglist[2]&0xF0;
		tx_Command.CommandData[18]=taglist[2]&0x0F;		
	}

	else
	{
		ComamndStatus=Errdataerr;
	}
	
}
void SetVlanMember()
{
	uint8 vlanid,portlist[3],taglist[3],i,index,temp;
	if(0x13!=rx_Command.CommandLen)
	{
		ComamndStatus=Errdataerr;
		return ;
	}
	sal_memset(portlist,0,3);
	sal_memset(taglist,0,3);
	vlanid=(rx_Command.CommandData[3]+rx_Command.CommandData[4])*256+rx_Command.CommandData[5]+rx_Command.CommandData[6];
	index=7;
	for(i=0;i<3;i++)
	{
		for(temp=0;temp<2;temp++)
		{
			if(!temp)
			{
				portlist[i]=rx_Command.CommandData[index];
			}
			else
			{
				portlist[i]+=rx_Command.CommandData[index];
			}
			index++;
		}
	}
	for(i=0;i<3;i++)
	{
		for(temp=0;temp<2;temp++)
		{
			if(!temp)
			{
				taglist[i]=rx_Command.CommandData[index];
			}
			else
			{
				taglist[i]+=rx_Command.CommandData[index];
			}
			index++;
		}
	}
	if(SYS_OK==board_qvlan_port_set(vlanid,portlist,taglist))
	{
		tx_Command.CommandLen=0x08;
		
		tx_Command.CommandData[3]=rx_Command.CommandData[3];
		tx_Command.CommandData[4]=rx_Command.CommandData[4];
		tx_Command.CommandData[5]=rx_Command.CommandData[5];
		tx_Command.CommandData[6]=rx_Command.CommandData[6];
		tx_Command.CommandData[7]=0xFA;
	}
	else
	{
		ComamndStatus=Errdataerr;
	}
}
void Timeouthandler()
{
	EndRecCom();

	ComamndStatus=Errtimeout;
	CommandErrHandler();
	SendMessage();
}
void CommandErrHandler()
{
	tx_Command.CommandLen=1;
	tx_Command.CommandData[0]=ComamndStatus;
	
}
void SendMessage()
{
	uint8 i;
	put_char(tx_Command.CommandHead);
	put_char(tx_Command.CommandAddr);
	put_char(tx_Command.CommandID);
	put_char(tx_Command.CommandLen);
	for(i=0;i<tx_Command.CommandLen;i++)
	{
		put_char(tx_Command.CommandData[i]);
	}
	put_char(CheckCrc(tx_Command));
}
////////////////////////////////////////
#endif /* CFG_CLI_ENABLED */
